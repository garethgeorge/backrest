// @generated by protoc-gen-es v2.10.0 with parameter "target=ts"
// @generated from file v1sync/syncservice.proto (package v1sync, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Plan, Repo } from "../v1/config_pb";
import { file_v1_config } from "../v1/config_pb";
import type { SignedMessage } from "../v1/crypto_pb";
import { file_v1_crypto } from "../v1/crypto_pb";
import { file_v1_restic } from "../v1/restic_pb";
import type { OpSelectorSchema } from "../v1/service_pb";
import { file_v1_service } from "../v1/service_pb";
import type { OperationSchema } from "../v1/operations_pb";
import { file_v1_operations } from "../v1/operations_pb";
import { file_types_value } from "../types/value_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file v1sync/syncservice.proto.
 */
export const file_v1sync_syncservice: GenFile = /*@__PURE__*/
  fileDesc("Chh2MXN5bmMvc3luY3NlcnZpY2UucHJvdG8SBnYxc3luYyIrChZTeW5jU3RhdGVTdHJlYW1SZXF1ZXN0EhEKCXN1YnNjcmliZRgBIAEoCCKbAgoJUGVlclN0YXRlEhgKEHBlZXJfaW5zdGFuY2VfaWQYASABKAkSEgoKcGVlcl9rZXlpZBgCIAEoCRImCgVzdGF0ZRgDIAEoDjIXLnYxc3luYy5Db25uZWN0aW9uU3RhdGUSFgoOc3RhdHVzX21lc3NhZ2UYBCABKAkSKQoLa25vd25fcGxhbnMYBSADKAsyFC52MXN5bmMuUGxhbk1ldGFkYXRhEikKC2tub3duX3JlcG9zGAYgAygLMhQudjFzeW5jLlJlcG9NZXRhZGF0YRIrCg1yZW1vdGVfY29uZmlnGAcgASgLMhQudjFzeW5jLlJlbW90ZUNvbmZpZxIdChVsYXN0X2hlYXJ0YmVhdF9taWxsaXMYCCABKAMiPQoTQXV0aGVudGljYXRlUmVxdWVzdBImCgtpbnN0YW5jZV9pZBgBIAEoCzIRLnYxLlNpZ25lZE1lc3NhZ2UiPgocR2V0T3BlcmF0aW9uTWV0YWRhdGFSZXNwb25zZRIOCgZvcF9pZHMYASADKAMSDgoGbW9kbm9zGAIgAygDIkEKDExvZ0RhdGFFbnRyeRIOCgZsb2dfaWQYASABKAkSEgoKb3duZXJfb3BpZBgCIAEoAxINCgVjaHVuaxgDIAMoDCJoChxTZXRBdmFpbGFibGVSZXNvdXJjZXNSZXF1ZXN0EiMKBXJlcG9zGAEgAygLMhQudjFzeW5jLlBsYW5NZXRhZGF0YRIjCgVwbGFucxgCIAMoCzIULnYxc3luYy5SZXBvTWV0YWRhdGEiKAoMUmVwb01ldGFkYXRhEgoKAmlkGAEgASgJEgwKBGd1aWQYAiABKAkiGgoMUGxhbk1ldGFkYXRhEgoKAmlkGAEgASgJInYKEFNldENvbmZpZ1JlcXVlc3QSFwoFcGxhbnMYASADKAsyCC52MS5QbGFuEhcKBXJlcG9zGAIgAygLMggudjEuUmVwbxIXCg9yZXBvc190b19kZWxldGUYAyADKAkSFwoPcGxhbnNfdG9fZGVsZXRlGAQgAygJImAKDFJlbW90ZUNvbmZpZxINCgVtb2RubxgBIAEoBRIPCgd2ZXJzaW9uGAIgASgFEhcKBXJlcG9zGAMgAygLMggudjEuUmVwbxIXCgVwbGFucxgEIAMoCzIILnYxLlBsYW4qnAIKD0Nvbm5lY3Rpb25TdGF0ZRIcChhDT05ORUNUSU9OX1NUQVRFX1VOS05PV04QABIcChhDT05ORUNUSU9OX1NUQVRFX1BFTkRJTkcQARIeChpDT05ORUNUSU9OX1NUQVRFX0NPTk5FQ1RFRBACEiEKHUNPTk5FQ1RJT05fU1RBVEVfRElTQ09OTkVDVEVEEAMSHwobQ09OTkVDVElPTl9TVEFURV9SRVRSWV9XQUlUEAQSHwobQ09OTkVDVElPTl9TVEFURV9FUlJPUl9BVVRIEAoSIwofQ09OTkVDVElPTl9TVEFURV9FUlJPUl9QUk9UT0NPTBALEiMKH0NPTk5FQ1RJT05fU1RBVEVfRVJST1JfSU5URVJOQUwQDDJsChhCYWNrcmVzdFN5bmNTdGF0ZVNlcnZpY2USUAoXR2V0UGVlclN5bmNTdGF0ZXNTdHJlYW0SHi52MXN5bmMuU3luY1N0YXRlU3RyZWFtUmVxdWVzdBoRLnYxc3luYy5QZWVyU3RhdGUiADABMvoDCg9TeW5jUGVlclNlcnZpY2USRQoMQXV0aGVudGljYXRlEhsudjFzeW5jLkF1dGhlbnRpY2F0ZVJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJOChRHZXRPcGVyYXRpb25NZXRhZGF0YRIOLnYxLk9wU2VsZWN0b3IaJC52MXN5bmMuR2V0T3BlcmF0aW9uTWV0YWRhdGFSZXNwb25zZSIAEjsKDlNlbmRPcGVyYXRpb25zEg0udjEuT3BlcmF0aW9uGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgAoARI8CghTZW5kTG9ncxIULnYxc3luYy5Mb2dEYXRhRW50cnkaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiACgBElcKFVNldEF2YWlsYWJsZVJlc291cmNlcxIkLnYxc3luYy5TZXRBdmFpbGFibGVSZXNvdXJjZXNSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASPwoJU2V0Q29uZmlnEhgudjFzeW5jLlNldENvbmZpZ1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI7CglHZXRDb25maWcSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaFC52MXN5bmMuUmVtb3RlQ29uZmlnIgBCMFouZ2l0aHViLmNvbS9nYXJldGhnZW9yZ2UvYmFja3Jlc3QvZ2VuL2dvL3Yxc3luY2IGcHJvdG8z", [file_v1_config, file_v1_crypto, file_v1_restic, file_v1_service, file_v1_operations, file_types_value, file_google_protobuf_empty, file_google_api_annotations, file_google_protobuf_any]);

/**
 * @generated from message v1sync.SyncStateStreamRequest
 */
export type SyncStateStreamRequest = Message<"v1sync.SyncStateStreamRequest"> & {
  /**
   * If true, the stream will continue to send updates until cancelled.
   *
   * @generated from field: bool subscribe = 1;
   */
  subscribe: boolean;
};

/**
 * Describes the message v1sync.SyncStateStreamRequest.
 * Use `create(SyncStateStreamRequestSchema)` to create a new message.
 */
export const SyncStateStreamRequestSchema: GenMessage<SyncStateStreamRequest> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 0);

/**
 * @generated from message v1sync.PeerState
 */
export type PeerState = Message<"v1sync.PeerState"> & {
  /**
   * @generated from field: string peer_instance_id = 1;
   */
  peerInstanceId: string;

  /**
   * @generated from field: string peer_keyid = 2;
   */
  peerKeyid: string;

  /**
   * @generated from field: v1sync.ConnectionState state = 3;
   */
  state: ConnectionState;

  /**
   * @generated from field: string status_message = 4;
   */
  statusMessage: string;

  /**
   * List of plan IDs that the peer has.
   *
   * @generated from field: repeated v1sync.PlanMetadata known_plans = 5;
   */
  knownPlans: PlanMetadata[];

  /**
   * List of repo IDs that the peer has.
   *
   * @generated from field: repeated v1sync.RepoMetadata known_repos = 6;
   */
  knownRepos: RepoMetadata[];

  /**
   * The remote config of the peer, if available.
   *
   * @generated from field: v1sync.RemoteConfig remote_config = 7;
   */
  remoteConfig?: RemoteConfig;

  /**
   * The last time the peer sent a heartbeat, in milliseconds since epoch.
   *
   * @generated from field: int64 last_heartbeat_millis = 8;
   */
  lastHeartbeatMillis: bigint;
};

/**
 * Describes the message v1sync.PeerState.
 * Use `create(PeerStateSchema)` to create a new message.
 */
export const PeerStateSchema: GenMessage<PeerState> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 1);

/**
 * @generated from message v1sync.AuthenticateRequest
 */
export type AuthenticateRequest = Message<"v1sync.AuthenticateRequest"> & {
  /**
   * The ID of the peer instance.
   *
   * @generated from field: v1.SignedMessage instance_id = 1;
   */
  instanceId?: SignedMessage;
};

/**
 * Describes the message v1sync.AuthenticateRequest.
 * Use `create(AuthenticateRequestSchema)` to create a new message.
 */
export const AuthenticateRequestSchema: GenMessage<AuthenticateRequest> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 2);

/**
 * @generated from message v1sync.GetOperationMetadataResponse
 */
export type GetOperationMetadataResponse = Message<"v1sync.GetOperationMetadataResponse"> & {
  /**
   * The IDs of the operations.
   *
   * @generated from field: repeated int64 op_ids = 1;
   */
  opIds: bigint[];

  /**
   * The modnos of the operations.
   *
   * @generated from field: repeated int64 modnos = 2;
   */
  modnos: bigint[];
};

/**
 * Describes the message v1sync.GetOperationMetadataResponse.
 * Use `create(GetOperationMetadataResponseSchema)` to create a new message.
 */
export const GetOperationMetadataResponseSchema: GenMessage<GetOperationMetadataResponse> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 3);

/**
 * @generated from message v1sync.LogDataEntry
 */
export type LogDataEntry = Message<"v1sync.LogDataEntry"> & {
  /**
   * The ID of the log, only used for the first message in a log data stream.
   *
   * @generated from field: string log_id = 1;
   */
  logId: string;

  /**
   * The operation ID of the operation that owns this log data.
   *
   * @generated from field: int64 owner_opid = 2;
   */
  ownerOpid: bigint;

  /**
   * The log data chunk, can be sent repeatedly, must be terminated by a packet with size = 0.
   *
   * @generated from field: repeated bytes chunk = 3;
   */
  chunk: Uint8Array[];
};

/**
 * Describes the message v1sync.LogDataEntry.
 * Use `create(LogDataEntrySchema)` to create a new message.
 */
export const LogDataEntrySchema: GenMessage<LogDataEntry> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 4);

/**
 * @generated from message v1sync.SetAvailableResourcesRequest
 */
export type SetAvailableResourcesRequest = Message<"v1sync.SetAvailableResourcesRequest"> & {
  /**
   * The repos that are available.
   *
   * @generated from field: repeated v1sync.PlanMetadata repos = 1;
   */
  repos: PlanMetadata[];

  /**
   * The plans that are available.
   *
   * @generated from field: repeated v1sync.RepoMetadata plans = 2;
   */
  plans: RepoMetadata[];
};

/**
 * Describes the message v1sync.SetAvailableResourcesRequest.
 * Use `create(SetAvailableResourcesRequestSchema)` to create a new message.
 */
export const SetAvailableResourcesRequestSchema: GenMessage<SetAvailableResourcesRequest> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 5);

/**
 * @generated from message v1sync.RepoMetadata
 */
export type RepoMetadata = Message<"v1sync.RepoMetadata"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string guid = 2;
   */
  guid: string;
};

/**
 * Describes the message v1sync.RepoMetadata.
 * Use `create(RepoMetadataSchema)` to create a new message.
 */
export const RepoMetadataSchema: GenMessage<RepoMetadata> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 6);

/**
 * @generated from message v1sync.PlanMetadata
 */
export type PlanMetadata = Message<"v1sync.PlanMetadata"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message v1sync.PlanMetadata.
 * Use `create(PlanMetadataSchema)` to create a new message.
 */
export const PlanMetadataSchema: GenMessage<PlanMetadata> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 7);

/**
 * @generated from message v1sync.SetConfigRequest
 */
export type SetConfigRequest = Message<"v1sync.SetConfigRequest"> & {
  /**
   * The plans to set.
   *
   * @generated from field: repeated v1.Plan plans = 1;
   */
  plans: Plan[];

  /**
   * The repos to set.
   *
   * @generated from field: repeated v1.Repo repos = 2;
   */
  repos: Repo[];

  /**
   * The repo IDs to delete.
   *
   * @generated from field: repeated string repos_to_delete = 3;
   */
  reposToDelete: string[];

  /**
   * The plan IDs to delete.
   *
   * @generated from field: repeated string plans_to_delete = 4;
   */
  plansToDelete: string[];
};

/**
 * Describes the message v1sync.SetConfigRequest.
 * Use `create(SetConfigRequestSchema)` to create a new message.
 */
export const SetConfigRequestSchema: GenMessage<SetConfigRequest> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 8);

/**
 * @generated from message v1sync.RemoteConfig
 */
export type RemoteConfig = Message<"v1sync.RemoteConfig"> & {
  /**
   * The modno of the config.
   *
   * @generated from field: int32 modno = 1;
   */
  modno: number;

  /**
   * The storage version of the config.
   *
   * @generated from field: int32 version = 2;
   */
  version: number;

  /**
   * @generated from field: repeated v1.Repo repos = 3;
   */
  repos: Repo[];

  /**
   * @generated from field: repeated v1.Plan plans = 4;
   */
  plans: Plan[];
};

/**
 * Describes the message v1sync.RemoteConfig.
 * Use `create(RemoteConfigSchema)` to create a new message.
 */
export const RemoteConfigSchema: GenMessage<RemoteConfig> = /*@__PURE__*/
  messageDesc(file_v1sync_syncservice, 9);

/**
 * @generated from enum v1sync.ConnectionState
 */
export enum ConnectionState {
  /**
   * @generated from enum value: CONNECTION_STATE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: CONNECTION_STATE_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: CONNECTION_STATE_CONNECTED = 2;
   */
  CONNECTED = 2,

  /**
   * @generated from enum value: CONNECTION_STATE_DISCONNECTED = 3;
   */
  DISCONNECTED = 3,

  /**
   * @generated from enum value: CONNECTION_STATE_RETRY_WAIT = 4;
   */
  RETRY_WAIT = 4,

  /**
   * @generated from enum value: CONNECTION_STATE_ERROR_AUTH = 10;
   */
  ERROR_AUTH = 10,

  /**
   * @generated from enum value: CONNECTION_STATE_ERROR_PROTOCOL = 11;
   */
  ERROR_PROTOCOL = 11,

  /**
   * @generated from enum value: CONNECTION_STATE_ERROR_INTERNAL = 12;
   */
  ERROR_INTERNAL = 12,
}

/**
 * Describes the enum v1sync.ConnectionState.
 */
export const ConnectionStateSchema: GenEnum<ConnectionState> = /*@__PURE__*/
  enumDesc(file_v1sync_syncservice, 0);

/**
 * BackrestSyncStateService provides methods to query the sync state of known hosts and clients.
 * This service should be served behind authentication and authorization.
 *
 * @generated from service v1sync.BackrestSyncStateService
 */
export const BackrestSyncStateService: GenService<{
  /**
   * @generated from rpc v1sync.BackrestSyncStateService.GetPeerSyncStatesStream
   */
  getPeerSyncStatesStream: {
    methodKind: "server_streaming";
    input: typeof SyncStateStreamRequestSchema;
    output: typeof PeerStateSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_v1sync_syncservice, 0);

/**
 * @generated from service v1sync.SyncPeerService
 */
export const SyncPeerService: GenService<{
  /**
   * Authenticate authenticates the peer with the sync service, must be called before any other methods.
   *
   * @generated from rpc v1sync.SyncPeerService.Authenticate
   */
  authenticate: {
    methodKind: "unary";
    input: typeof AuthenticateRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * GetOperationMetadata returns a stream of sync items from the peer.
   *
   * @generated from rpc v1sync.SyncPeerService.GetOperationMetadata
   */
  getOperationMetadata: {
    methodKind: "unary";
    input: typeof OpSelectorSchema;
    output: typeof GetOperationMetadataResponseSchema;
  },
  /**
   * @generated from rpc v1sync.SyncPeerService.SendOperations
   */
  sendOperations: {
    methodKind: "client_streaming";
    input: typeof OperationSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc v1sync.SyncPeerService.SendLogs
   */
  sendLogs: {
    methodKind: "client_streaming";
    input: typeof LogDataEntrySchema;
    output: typeof EmptySchema;
  },
  /**
   * Called everytime the set of resources available to the peer changes.
   *
   * @generated from rpc v1sync.SyncPeerService.SetAvailableResources
   */
  setAvailableResources: {
    methodKind: "unary";
    input: typeof SetAvailableResourcesRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Implements semantics for updating the remote config of the peer.
   *
   * @generated from rpc v1sync.SyncPeerService.SetConfig
   */
  setConfig: {
    methodKind: "unary";
    input: typeof SetConfigRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc v1sync.SyncPeerService.GetConfig
   */
  getConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof RemoteConfigSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_v1sync_syncservice, 1);

