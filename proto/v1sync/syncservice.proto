syntax = "proto3";

package v1sync;

option go_package = "github.com/garethgeorge/backrest/gen/go/v1sync";

import "v1/config.proto";
import "v1/crypto.proto";
import "v1/restic.proto";
import "v1/service.proto";
import "v1/operations.proto";
import "types/value.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";


// BackrestSyncStateService provides methods to query the sync state of known hosts and clients.
// This service should be served behind authentication and authorization.
service BackrestSyncStateService {
  rpc GetPeerSyncStatesStream(SyncStateStreamRequest) returns (stream PeerState) {}
}


message SyncStateStreamRequest {
  bool subscribe = 1; // If true, the stream will continue to send updates until cancelled.
}

message PeerState {
  string peer_instance_id = 1;
  string peer_keyid = 2;
  ConnectionState state = 3;
  string status_message = 4;

  repeated PlanMetadata known_plans = 5; // List of plan IDs that the peer has.
  repeated RepoMetadata known_repos = 6; // List of repo IDs that the peer has.
  RemoteConfig remote_config = 7; // The remote config of the peer, if available.

  int64 last_heartbeat_millis = 8; // The last time the peer sent a heartbeat, in milliseconds since epoch.
}

service SyncPeerService {
  // Authenticate authenticates the peer with the sync service, must be called before any other methods.
  rpc Authenticate(AuthenticateRequest) returns (google.protobuf.Empty) {}

  // GetOperationMetadata returns a stream of sync items from the peer.
  rpc GetOperationMetadata(v1.OpSelector) returns (GetOperationMetadataResponse) {}
  rpc SendOperations(stream v1.Operation) returns (google.protobuf.Empty) {}
  rpc SendLogs(stream LogDataEntry) returns (google.protobuf.Empty) {}

  // Called everytime the set of resources available to the peer changes.
  rpc SetAvailableResources(SetAvailableResourcesRequest) returns (google.protobuf.Empty) {}

  // Implements semantics for updating the remote config of the peer.
  rpc SetConfig(SetConfigRequest) returns (google.protobuf.Empty) {}
  rpc GetConfig(google.protobuf.Empty) returns (RemoteConfig) {}
}

message AuthenticateRequest {
  v1.SignedMessage instance_id = 1; // The ID of the peer instance.
}

message GetOperationMetadataResponse {
  repeated int64 op_ids = 1; // The IDs of the operations.
  repeated int64 modnos = 2; // The modnos of the operations.
}

message LogDataEntry {
  string log_id = 1; // The ID of the log, only used for the first message in a log data stream.
  int64 owner_opid = 2; // The operation ID of the operation that owns this log data.
  repeated bytes chunk = 3; // The log data chunk, can be sent repeatedly, must be terminated by a packet with size = 0.
}

message SetAvailableResourcesRequest {
  repeated PlanMetadata repos = 1; // The repos that are available.
  repeated RepoMetadata plans = 2; // The plans that are available.
}

message RepoMetadata {
  string id = 1;
  string guid = 2;
}

message PlanMetadata {
  string id = 1;
}

enum ConnectionState {
  CONNECTION_STATE_UNKNOWN = 0;
  CONNECTION_STATE_PENDING = 1;
  CONNECTION_STATE_CONNECTED = 2;
  CONNECTION_STATE_DISCONNECTED = 3;
  CONNECTION_STATE_RETRY_WAIT = 4;
  CONNECTION_STATE_ERROR_AUTH = 10;
  CONNECTION_STATE_ERROR_PROTOCOL = 11;
  CONNECTION_STATE_ERROR_INTERNAL = 12;
}

message SetConfigRequest {
  repeated v1.Plan plans = 1; // The plans to set.
  repeated v1.Repo repos = 2; // The repos to set.
  repeated string repos_to_delete = 3; // The repo IDs to delete.
  repeated string plans_to_delete = 4; // The plan IDs to delete.
}

message RemoteConfig {
  int32 modno = 1; // The modno of the config.
  int32 version = 2; // The storage version of the config.
  repeated v1.Repo repos = 3;
  repeated v1.Plan plans = 4;
}

/*SyncStreamItem
message SyncStreamItem {
  oneof action {
    v1.SignedMessage signed_message = 1;
    SyncActionHandshake handshake = 3; // note: mostly deprecated, sent through headers rather than stream.
    SyncActionHeartbeat heartbeat = 4;
    
    SyncActionDiffOperations diff_operations = 20;
    SyncActionSendOperations send_operations = 21;
    SyncActionSendConfig send_config = 22;
    SyncActionSetConfig set_config = 24;
    SyncActionListResources list_resources = 25;
    SyncActionGetLog get_log = 26;
    SyncActionSendLogData send_log_data = 27;

    SyncActionThrottle throttle = 1000;
  }

  message SyncActionHandshake {
    int64 protocol_version = 1;
    PublicKey public_key = 2;
    SignedMessage instance_id = 3;
  }

  // SyncActionHeartbeat is sent periodically to keep the connection alive.
  message SyncActionHeartbeat {}

  message SyncActionSendConfig {
    RemoteConfig config = 1;
  }

  message SyncActionSetConfig {
    repeated Repo repos = 1;
    repeated Plan plans = 2;
    repeated string repos_to_delete = 3;
    repeated string plans_to_delete = 4;
  }

  message SyncActionListResources {
    repeated SyncRepoMetadata repos = 1;
    repeated SyncPlanMetadata plans = 2;
  }

  message SyncActionConnectRepo {
    string repo_id = 1;
  }

  enum RepoConnectionState {
    CONNECTION_STATE_UNKNOWN = 0;
    CONNECTION_STATE_PENDING = 1; // queried, response not yet received.
    CONNECTION_STATE_CONNECTED = 2;
    CONNECTION_STATE_UNAUTHORIZED = 3;
    CONNECTION_STATE_NOT_FOUND = 4;
  }

  message SyncActionDiffOperations {
    // Client connects and sends a list of "have_operations" that exist in its log.
    // have_operation_ids and have_operation_modnos are the operation IDs and modnos that the client has when zip'd pairwise.
    OpSelector have_operations_selector = 1;
    repeated int64 have_operation_ids = 2;
    repeated int64 have_operation_modnos = 3;
    // Server sends a list of "request_operations" for any operations that it doesn't have.
    repeated int64 request_operations = 4;
  }

  message SyncActionSendOperations {
    OperationEvent event = 1;
  }

  message SyncActionGetLog {
    string log_id = 1;
  }

  message SyncActionSendLogData {
    string log_id = 1;

    // Required only for first message in a log data stream.
    int64 owner_opid = 2; // The operation ID of the operation that owns this log data.
    int64 expiration_ts_unix = 3; // Unix timestamp in seconds when the log data expires.

    // Can be sent repeatedly, must be terminated by a packet with size = 0.
    bytes chunk = 4;
  }

  message SyncActionThrottle {
    int64 delay_ms = 1;
  }

  message SyncEstablishSharedSecret {
    // a one-time-use ed25519 public key with a matching unshared private key. Used to perform a key exchange.
    // See https://pkg.go.dev/crypto/ecdh#PrivateKey.ECDH .
    string ed25519 = 2 [json_name="ed25519pub"]; // base64 encoded public key
  }
}

// RemoteConfig contains shareable properties from a remote backrest instance.
message RemoteConfig {
  int32 modno = 1; // The modno of the config.
  int32 version = 2; // The storage version of the config.
  repeated Repo repos = 3;
  repeated Plan plans = 4;
}
*/
