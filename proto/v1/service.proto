syntax = "proto3";

package v1;

option go_package = "github.com/garethgeorge/backrest/gen/go/v1";

import "v1/config.proto";
import "v1/restic.proto";
import "v1/operations.proto";
import "types/value.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service Backrest {
  rpc GetConfig (google.protobuf.Empty) returns (Config) {}

  rpc SetConfig (Config) returns (Config) {}

  rpc AddRepo (Repo) returns (Config) {}

  rpc GetOperationEvents (google.protobuf.Empty) returns (stream OperationEvent) {}

  rpc GetOperations (GetOperationsRequest) returns (OperationList) {}

  rpc ListSnapshots(ListSnapshotsRequest) returns (ResticSnapshotList) {}

  rpc ListSnapshotFiles(ListSnapshotFilesRequest) returns (ListSnapshotFilesResponse) {}

  // IndexSnapshots triggers indexin. It accepts a repo id and returns empty if the task is enqueued.
  rpc IndexSnapshots(types.StringValue) returns (google.protobuf.Empty) {}

  // Backup schedules a backup operation. It accepts a plan id and returns empty if the task is enqueued.
  rpc Backup(types.StringValue) returns (google.protobuf.Empty) {}

  // Prune schedules a prune operation. It accepts a plan id and returns empty if the task is enqueued.
  rpc Prune(types.StringValue) returns (google.protobuf.Empty) {}

  // Forget schedules a forget operation. It accepts a plan id and returns empty if the task is enqueued.
  rpc Forget(types.StringValue) returns (google.protobuf.Empty) {}

  // Restore schedules a restore operation.
  rpc Restore(RestoreSnapshotRequest) returns (google.protobuf.Empty) {}

  // Unlock synchronously attempts to unlock the repo. Will block if other operations are in progress.
  rpc Unlock(types.StringValue) returns (google.protobuf.Empty) {}

  // Stats runs 'restic stats` on the repository and appends the results to the operations log.
  rpc Stats(types.StringValue) returns (google.protobuf.Empty) {}

  // Cancel attempts to cancel a task with the given operation ID. Not guaranteed to succeed.
  rpc Cancel(types.Int64Value) returns (google.protobuf.Empty) {}

  // GetOperationData returns the keyed large data for the given operation.
  rpc GetOperationData(OperationDataRequest) returns (types.BytesValue) {}

  // Clears the history of operations
  rpc ClearHistory(ClearHistoryRequest) returns (google.protobuf.Empty) {}

  // PathAutocomplete provides path autocompletion options for a given filesystem path.
  rpc PathAutocomplete (types.StringValue) returns (types.StringList) {}
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string jwt = 1;
}

message ClearHistoryRequest {
  string repo_id = 1;
  string plan_id = 2;
  bool only_failed = 3;
}

message ListSnapshotsRequest {
  string repo_id = 1;
  string plan_id = 2;
}

message GetOperationsRequest {
  string repo_id = 1;
  string plan_id = 2;
  string snapshot_id = 4;
  repeated int64 ids = 5;
  int64 last_n = 3; // limit to the last n operations
}

message RestoreSnapshotRequest {
  string plan_id = 1;
  string snapshot_id = 2;
  string path = 3;
  string target = 4;
}

message ListSnapshotFilesRequest {
  string repo_id = 1;
  string snapshot_id = 2;
  string path = 3;
}

message ListSnapshotFilesResponse {
  string path = 1;
  repeated LsEntry entries = 2;
}

message OperationDataRequest {
  int64 id = 1; // operation id
  string key = 2; // data key
}

message LsEntry {
  string name = 1;
  string type = 2;
  string path = 3;
  int64 uid = 4;
  int64 gid = 5;
  int64 size = 6;
  int64 mode = 7;
  string mtime = 8;
  string atime = 9;
  string ctime = 10;
}
