// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: v1/operations.proto

package v1

import (
	types "github.com/garethgeorge/backrest/gen/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OperationEventType indicates whether the operation was created or updated
type OperationEventType int32

const (
	OperationEventType_EVENT_UNKNOWN OperationEventType = 0
	OperationEventType_EVENT_CREATED OperationEventType = 1
	OperationEventType_EVENT_UPDATED OperationEventType = 2
	OperationEventType_EVENT_DELETED OperationEventType = 3
)

// Enum value maps for OperationEventType.
var (
	OperationEventType_name = map[int32]string{
		0: "EVENT_UNKNOWN",
		1: "EVENT_CREATED",
		2: "EVENT_UPDATED",
		3: "EVENT_DELETED",
	}
	OperationEventType_value = map[string]int32{
		"EVENT_UNKNOWN": 0,
		"EVENT_CREATED": 1,
		"EVENT_UPDATED": 2,
		"EVENT_DELETED": 3,
	}
)

func (x OperationEventType) Enum() *OperationEventType {
	p := new(OperationEventType)
	*p = x
	return p
}

func (x OperationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_operations_proto_enumTypes[0].Descriptor()
}

func (OperationEventType) Type() protoreflect.EnumType {
	return &file_v1_operations_proto_enumTypes[0]
}

func (x OperationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationEventType.Descriptor instead.
func (OperationEventType) EnumDescriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{0}
}

type OperationStatus int32

const (
	OperationStatus_STATUS_UNKNOWN          OperationStatus = 0 // used to indicate that the status is unknown.
	OperationStatus_STATUS_PENDING          OperationStatus = 1 // used to indicate that the operation is pending.
	OperationStatus_STATUS_INPROGRESS       OperationStatus = 2 // used to indicate that the operation is in progress.
	OperationStatus_STATUS_SUCCESS          OperationStatus = 3 // used to indicate that the operation completed successfully.
	OperationStatus_STATUS_WARNING          OperationStatus = 7 // used to indicate that the operation completed with warnings.
	OperationStatus_STATUS_ERROR            OperationStatus = 4 // used to indicate that the operation failed.
	OperationStatus_STATUS_SYSTEM_CANCELLED OperationStatus = 5 // indicates operation cancelled by the system.
	OperationStatus_STATUS_USER_CANCELLED   OperationStatus = 6 // indicates operation cancelled by the user.
)

// Enum value maps for OperationStatus.
var (
	OperationStatus_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_PENDING",
		2: "STATUS_INPROGRESS",
		3: "STATUS_SUCCESS",
		7: "STATUS_WARNING",
		4: "STATUS_ERROR",
		5: "STATUS_SYSTEM_CANCELLED",
		6: "STATUS_USER_CANCELLED",
	}
	OperationStatus_value = map[string]int32{
		"STATUS_UNKNOWN":          0,
		"STATUS_PENDING":          1,
		"STATUS_INPROGRESS":       2,
		"STATUS_SUCCESS":          3,
		"STATUS_WARNING":          7,
		"STATUS_ERROR":            4,
		"STATUS_SYSTEM_CANCELLED": 5,
		"STATUS_USER_CANCELLED":   6,
	}
)

func (x OperationStatus) Enum() *OperationStatus {
	p := new(OperationStatus)
	*p = x
	return p
}

func (x OperationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_operations_proto_enumTypes[1].Descriptor()
}

func (OperationStatus) Type() protoreflect.EnumType {
	return &file_v1_operations_proto_enumTypes[1]
}

func (x OperationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus.Descriptor instead.
func (OperationStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{1}
}

type OperationList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Operations    []*Operation           `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationList) Reset() {
	*x = OperationList{}
	mi := &file_v1_operations_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationList) ProtoMessage() {}

func (x *OperationList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationList.ProtoReflect.Descriptor instead.
func (*OperationList) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{0}
}

func (x *OperationList) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// Operation is the basic unit of record in backrest
type Operation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// required, primary ID of the operation. ID is sequential based on creation time of the operation.
	Id         int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OriginalId int64 `protobuf:"varint,13,opt,name=original_id,json=originalId,proto3" json:"original_id,omitempty"`
	// modno increments with each change to the operation. This supports easy diffing.
	Modno int64 `protobuf:"varint,12,opt,name=modno,proto3" json:"modno,omitempty"`
	// flow id groups operations together, e.g. by an execution of a plan.
	// must be unique within the context of a repo.
	FlowId         int64 `protobuf:"varint,10,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	OriginalFlowId int64 `protobuf:"varint,14,opt,name=original_flow_id,json=originalFlowId,proto3" json:"original_flow_id,omitempty"`
	// repo id is a string identifier for the repo, and repo_guid is the globally unique ID of the repo.
	RepoId   string `protobuf:"bytes,2,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	RepoGuid string `protobuf:"bytes,15,opt,name=repo_guid,json=repoGuid,proto3" json:"repo_guid,omitempty"`
	// plan id e.g. a scheduled set of operations (or system) that created this operation.
	PlanId string `protobuf:"bytes,3,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// instance ID that the operation is attributed to, not necessarily the same as the instance that created it.
	InstanceId string `protobuf:"bytes,11,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// original instance guid is the verifiable instance that created the operation. Only set for remote operations created by sync.
	OriginalInstanceKeyid string `protobuf:"bytes,16,opt,name=original_instance_keyid,json=originalInstanceKeyid,proto3" json:"original_instance_keyid,omitempty"`
	// optional snapshot id if associated with a snapshot.
	SnapshotId string          `protobuf:"bytes,8,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	Status     OperationStatus `protobuf:"varint,4,opt,name=status,proto3,enum=v1.OperationStatus" json:"status,omitempty"`
	// required, unix time in milliseconds of the operation's creation (ID is derived from this)
	UnixTimeStartMs int64 `protobuf:"varint,5,opt,name=unix_time_start_ms,json=unixTimeStartMs,proto3" json:"unix_time_start_ms,omitempty"`
	// ptional, unix time in milliseconds of the operation's completion
	UnixTimeEndMs int64 `protobuf:"varint,6,opt,name=unix_time_end_ms,json=unixTimeEndMs,proto3" json:"unix_time_end_ms,omitempty"`
	// optional, human readable context message, typically an error message.
	DisplayMessage string `protobuf:"bytes,7,opt,name=display_message,json=displayMessage,proto3" json:"display_message,omitempty"`
	// logref can point to arbitrary logs associated with the operation.
	Logref string `protobuf:"bytes,9,opt,name=logref,proto3" json:"logref,omitempty"`
	// Types that are valid to be assigned to Op:
	//
	//	*Operation_OperationBackup
	//	*Operation_OperationIndexSnapshot
	//	*Operation_OperationForget
	//	*Operation_OperationPrune
	//	*Operation_OperationRestore
	//	*Operation_OperationStats
	//	*Operation_OperationRunHook
	//	*Operation_OperationCheck
	//	*Operation_OperationRunCommand
	Op            isOperation_Op `protobuf_oneof:"op"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Operation) Reset() {
	*x = Operation{}
	mi := &file_v1_operations_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{1}
}

func (x *Operation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Operation) GetOriginalId() int64 {
	if x != nil {
		return x.OriginalId
	}
	return 0
}

func (x *Operation) GetModno() int64 {
	if x != nil {
		return x.Modno
	}
	return 0
}

func (x *Operation) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *Operation) GetOriginalFlowId() int64 {
	if x != nil {
		return x.OriginalFlowId
	}
	return 0
}

func (x *Operation) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *Operation) GetRepoGuid() string {
	if x != nil {
		return x.RepoGuid
	}
	return ""
}

func (x *Operation) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *Operation) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Operation) GetOriginalInstanceKeyid() string {
	if x != nil {
		return x.OriginalInstanceKeyid
	}
	return ""
}

func (x *Operation) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *Operation) GetStatus() OperationStatus {
	if x != nil {
		return x.Status
	}
	return OperationStatus_STATUS_UNKNOWN
}

func (x *Operation) GetUnixTimeStartMs() int64 {
	if x != nil {
		return x.UnixTimeStartMs
	}
	return 0
}

func (x *Operation) GetUnixTimeEndMs() int64 {
	if x != nil {
		return x.UnixTimeEndMs
	}
	return 0
}

func (x *Operation) GetDisplayMessage() string {
	if x != nil {
		return x.DisplayMessage
	}
	return ""
}

func (x *Operation) GetLogref() string {
	if x != nil {
		return x.Logref
	}
	return ""
}

func (x *Operation) GetOp() isOperation_Op {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *Operation) GetOperationBackup() *OperationBackup {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationBackup); ok {
			return x.OperationBackup
		}
	}
	return nil
}

func (x *Operation) GetOperationIndexSnapshot() *OperationIndexSnapshot {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationIndexSnapshot); ok {
			return x.OperationIndexSnapshot
		}
	}
	return nil
}

func (x *Operation) GetOperationForget() *OperationForget {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationForget); ok {
			return x.OperationForget
		}
	}
	return nil
}

func (x *Operation) GetOperationPrune() *OperationPrune {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationPrune); ok {
			return x.OperationPrune
		}
	}
	return nil
}

func (x *Operation) GetOperationRestore() *OperationRestore {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationRestore); ok {
			return x.OperationRestore
		}
	}
	return nil
}

func (x *Operation) GetOperationStats() *OperationStats {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationStats); ok {
			return x.OperationStats
		}
	}
	return nil
}

func (x *Operation) GetOperationRunHook() *OperationRunHook {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationRunHook); ok {
			return x.OperationRunHook
		}
	}
	return nil
}

func (x *Operation) GetOperationCheck() *OperationCheck {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationCheck); ok {
			return x.OperationCheck
		}
	}
	return nil
}

func (x *Operation) GetOperationRunCommand() *OperationRunCommand {
	if x != nil {
		if x, ok := x.Op.(*Operation_OperationRunCommand); ok {
			return x.OperationRunCommand
		}
	}
	return nil
}

type isOperation_Op interface {
	isOperation_Op()
}

type Operation_OperationBackup struct {
	OperationBackup *OperationBackup `protobuf:"bytes,100,opt,name=operation_backup,json=operationBackup,proto3,oneof"`
}

type Operation_OperationIndexSnapshot struct {
	OperationIndexSnapshot *OperationIndexSnapshot `protobuf:"bytes,101,opt,name=operation_index_snapshot,json=operationIndexSnapshot,proto3,oneof"`
}

type Operation_OperationForget struct {
	OperationForget *OperationForget `protobuf:"bytes,102,opt,name=operation_forget,json=operationForget,proto3,oneof"`
}

type Operation_OperationPrune struct {
	OperationPrune *OperationPrune `protobuf:"bytes,103,opt,name=operation_prune,json=operationPrune,proto3,oneof"`
}

type Operation_OperationRestore struct {
	OperationRestore *OperationRestore `protobuf:"bytes,104,opt,name=operation_restore,json=operationRestore,proto3,oneof"`
}

type Operation_OperationStats struct {
	OperationStats *OperationStats `protobuf:"bytes,105,opt,name=operation_stats,json=operationStats,proto3,oneof"`
}

type Operation_OperationRunHook struct {
	OperationRunHook *OperationRunHook `protobuf:"bytes,106,opt,name=operation_run_hook,json=operationRunHook,proto3,oneof"`
}

type Operation_OperationCheck struct {
	OperationCheck *OperationCheck `protobuf:"bytes,107,opt,name=operation_check,json=operationCheck,proto3,oneof"`
}

type Operation_OperationRunCommand struct {
	OperationRunCommand *OperationRunCommand `protobuf:"bytes,108,opt,name=operation_run_command,json=operationRunCommand,proto3,oneof"`
}

func (*Operation_OperationBackup) isOperation_Op() {}

func (*Operation_OperationIndexSnapshot) isOperation_Op() {}

func (*Operation_OperationForget) isOperation_Op() {}

func (*Operation_OperationPrune) isOperation_Op() {}

func (*Operation_OperationRestore) isOperation_Op() {}

func (*Operation_OperationStats) isOperation_Op() {}

func (*Operation_OperationRunHook) isOperation_Op() {}

func (*Operation_OperationCheck) isOperation_Op() {}

func (*Operation_OperationRunCommand) isOperation_Op() {}

// OperationEvent is used in the wireformat to stream operation changes to clients
type OperationEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*OperationEvent_KeepAlive
	//	*OperationEvent_CreatedOperations
	//	*OperationEvent_UpdatedOperations
	//	*OperationEvent_DeletedOperations
	Event         isOperationEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationEvent) Reset() {
	*x = OperationEvent{}
	mi := &file_v1_operations_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationEvent) ProtoMessage() {}

func (x *OperationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationEvent.ProtoReflect.Descriptor instead.
func (*OperationEvent) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{2}
}

func (x *OperationEvent) GetEvent() isOperationEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *OperationEvent) GetKeepAlive() *types.Empty {
	if x != nil {
		if x, ok := x.Event.(*OperationEvent_KeepAlive); ok {
			return x.KeepAlive
		}
	}
	return nil
}

func (x *OperationEvent) GetCreatedOperations() *OperationList {
	if x != nil {
		if x, ok := x.Event.(*OperationEvent_CreatedOperations); ok {
			return x.CreatedOperations
		}
	}
	return nil
}

func (x *OperationEvent) GetUpdatedOperations() *OperationList {
	if x != nil {
		if x, ok := x.Event.(*OperationEvent_UpdatedOperations); ok {
			return x.UpdatedOperations
		}
	}
	return nil
}

func (x *OperationEvent) GetDeletedOperations() *types.Int64List {
	if x != nil {
		if x, ok := x.Event.(*OperationEvent_DeletedOperations); ok {
			return x.DeletedOperations
		}
	}
	return nil
}

type isOperationEvent_Event interface {
	isOperationEvent_Event()
}

type OperationEvent_KeepAlive struct {
	KeepAlive *types.Empty `protobuf:"bytes,1,opt,name=keep_alive,json=keepAlive,proto3,oneof"`
}

type OperationEvent_CreatedOperations struct {
	CreatedOperations *OperationList `protobuf:"bytes,2,opt,name=created_operations,json=createdOperations,proto3,oneof"`
}

type OperationEvent_UpdatedOperations struct {
	UpdatedOperations *OperationList `protobuf:"bytes,3,opt,name=updated_operations,json=updatedOperations,proto3,oneof"`
}

type OperationEvent_DeletedOperations struct {
	DeletedOperations *types.Int64List `protobuf:"bytes,4,opt,name=deleted_operations,json=deletedOperations,proto3,oneof"`
}

func (*OperationEvent_KeepAlive) isOperationEvent_Event() {}

func (*OperationEvent_CreatedOperations) isOperationEvent_Event() {}

func (*OperationEvent_UpdatedOperations) isOperationEvent_Event() {}

func (*OperationEvent_DeletedOperations) isOperationEvent_Event() {}

type OperationBackup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastStatus    *BackupProgressEntry   `protobuf:"bytes,3,opt,name=last_status,json=lastStatus,proto3" json:"last_status,omitempty"`
	Errors        []*BackupProgressError `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationBackup) Reset() {
	*x = OperationBackup{}
	mi := &file_v1_operations_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationBackup) ProtoMessage() {}

func (x *OperationBackup) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationBackup.ProtoReflect.Descriptor instead.
func (*OperationBackup) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{3}
}

func (x *OperationBackup) GetLastStatus() *BackupProgressEntry {
	if x != nil {
		return x.LastStatus
	}
	return nil
}

func (x *OperationBackup) GetErrors() []*BackupProgressError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// OperationIndexSnapshot tracks that a snapshot was detected by backrest.
type OperationIndexSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Snapshot      *ResticSnapshot        `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"` // the snapshot that was indexed.
	Forgot        bool                   `protobuf:"varint,3,opt,name=forgot,proto3" json:"forgot,omitempty"`    // tracks whether this snapshot is forgotten yet.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationIndexSnapshot) Reset() {
	*x = OperationIndexSnapshot{}
	mi := &file_v1_operations_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationIndexSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationIndexSnapshot) ProtoMessage() {}

func (x *OperationIndexSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationIndexSnapshot.ProtoReflect.Descriptor instead.
func (*OperationIndexSnapshot) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{4}
}

func (x *OperationIndexSnapshot) GetSnapshot() *ResticSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *OperationIndexSnapshot) GetForgot() bool {
	if x != nil {
		return x.Forgot
	}
	return false
}

// OperationForget tracks a forget operation.
type OperationForget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Forget        []*ResticSnapshot      `protobuf:"bytes,1,rep,name=forget,proto3" json:"forget,omitempty"`
	Policy        *RetentionPolicy       `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationForget) Reset() {
	*x = OperationForget{}
	mi := &file_v1_operations_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationForget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationForget) ProtoMessage() {}

func (x *OperationForget) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationForget.ProtoReflect.Descriptor instead.
func (*OperationForget) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{5}
}

func (x *OperationForget) GetForget() []*ResticSnapshot {
	if x != nil {
		return x.Forget
	}
	return nil
}

func (x *OperationForget) GetPolicy() *RetentionPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

// OperationPrune tracks a prune operation.
type OperationPrune struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in v1/operations.proto.
	Output        string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`                                 // output of the prune.
	OutputLogref  string `protobuf:"bytes,2,opt,name=output_logref,json=outputLogref,proto3" json:"output_logref,omitempty"` // logref of the prune output.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationPrune) Reset() {
	*x = OperationPrune{}
	mi := &file_v1_operations_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationPrune) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationPrune) ProtoMessage() {}

func (x *OperationPrune) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationPrune.ProtoReflect.Descriptor instead.
func (*OperationPrune) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Marked as deprecated in v1/operations.proto.
func (x *OperationPrune) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *OperationPrune) GetOutputLogref() string {
	if x != nil {
		return x.OutputLogref
	}
	return ""
}

// OperationCheck tracks a check operation.
type OperationCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in v1/operations.proto.
	Output        string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`                                 // output of the check operation.
	OutputLogref  string `protobuf:"bytes,2,opt,name=output_logref,json=outputLogref,proto3" json:"output_logref,omitempty"` // logref of the check output.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationCheck) Reset() {
	*x = OperationCheck{}
	mi := &file_v1_operations_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationCheck) ProtoMessage() {}

func (x *OperationCheck) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationCheck.ProtoReflect.Descriptor instead.
func (*OperationCheck) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{7}
}

// Deprecated: Marked as deprecated in v1/operations.proto.
func (x *OperationCheck) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *OperationCheck) GetOutputLogref() string {
	if x != nil {
		return x.OutputLogref
	}
	return ""
}

// OperationRunCommand tracks a long running command. Commands are grouped into a flow ID for each session.
type OperationRunCommand struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Command         string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	OutputLogref    string                 `protobuf:"bytes,2,opt,name=output_logref,json=outputLogref,proto3" json:"output_logref,omitempty"`
	OutputSizeBytes int64                  `protobuf:"varint,3,opt,name=output_size_bytes,json=outputSizeBytes,proto3" json:"output_size_bytes,omitempty"` // not necessarily authoritative, tracked as an optimization to allow clients to avoid fetching very large outputs.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OperationRunCommand) Reset() {
	*x = OperationRunCommand{}
	mi := &file_v1_operations_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationRunCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRunCommand) ProtoMessage() {}

func (x *OperationRunCommand) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRunCommand.ProtoReflect.Descriptor instead.
func (*OperationRunCommand) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{8}
}

func (x *OperationRunCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *OperationRunCommand) GetOutputLogref() string {
	if x != nil {
		return x.OutputLogref
	}
	return ""
}

func (x *OperationRunCommand) GetOutputSizeBytes() int64 {
	if x != nil {
		return x.OutputSizeBytes
	}
	return 0
}

// OperationRestore tracks a restore operation.
type OperationRestore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                               // path in the snapshot to restore.
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`                           // location to restore it to.
	LastStatus    *RestoreProgressEntry  `protobuf:"bytes,3,opt,name=last_status,json=lastStatus,proto3" json:"last_status,omitempty"` // status of the restore.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationRestore) Reset() {
	*x = OperationRestore{}
	mi := &file_v1_operations_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationRestore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRestore) ProtoMessage() {}

func (x *OperationRestore) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRestore.ProtoReflect.Descriptor instead.
func (*OperationRestore) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{9}
}

func (x *OperationRestore) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OperationRestore) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *OperationRestore) GetLastStatus() *RestoreProgressEntry {
	if x != nil {
		return x.LastStatus
	}
	return nil
}

// OperationStats tracks a stats operation.
type OperationStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stats         *RepoStats             `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationStats) Reset() {
	*x = OperationStats{}
	mi := &file_v1_operations_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStats) ProtoMessage() {}

func (x *OperationStats) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStats.ProtoReflect.Descriptor instead.
func (*OperationStats) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{10}
}

func (x *OperationStats) GetStats() *RepoStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// OperationRunHook tracks a hook that was run.
type OperationRunHook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentOp      int64                  `protobuf:"varint,4,opt,name=parent_op,json=parentOp,proto3" json:"parent_op,omitempty"`            // ID of the operation that ran the hook.
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // description of the hook that was run. typically repo/hook_idx or plan/hook_idx.
	OutputLogref  string                 `protobuf:"bytes,2,opt,name=output_logref,json=outputLogref,proto3" json:"output_logref,omitempty"` // logref of the hook's output. DEPRECATED.
	Condition     Hook_Condition         `protobuf:"varint,3,opt,name=condition,proto3,enum=v1.Hook_Condition" json:"condition,omitempty"`   // triggering condition of the hook.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationRunHook) Reset() {
	*x = OperationRunHook{}
	mi := &file_v1_operations_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationRunHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRunHook) ProtoMessage() {}

func (x *OperationRunHook) ProtoReflect() protoreflect.Message {
	mi := &file_v1_operations_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRunHook.ProtoReflect.Descriptor instead.
func (*OperationRunHook) Descriptor() ([]byte, []int) {
	return file_v1_operations_proto_rawDescGZIP(), []int{11}
}

func (x *OperationRunHook) GetParentOp() int64 {
	if x != nil {
		return x.ParentOp
	}
	return 0
}

func (x *OperationRunHook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperationRunHook) GetOutputLogref() string {
	if x != nil {
		return x.OutputLogref
	}
	return ""
}

func (x *OperationRunHook) GetCondition() Hook_Condition {
	if x != nil {
		return x.Condition
	}
	return Hook_CONDITION_UNKNOWN
}

var File_v1_operations_proto protoreflect.FileDescriptor

const file_v1_operations_proto_rawDesc = "" +
	"\n" +
	"\x13v1/operations.proto\x12\x02v1\x1a\x0fv1/restic.proto\x1a\x0fv1/config.proto\x1a\x11types/value.proto\">\n" +
	"\rOperationList\x12-\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2\r.v1.OperationR\n" +
	"operations\"\x9b\t\n" +
	"\tOperation\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1f\n" +
	"\voriginal_id\x18\r \x01(\x03R\n" +
	"originalId\x12\x14\n" +
	"\x05modno\x18\f \x01(\x03R\x05modno\x12\x17\n" +
	"\aflow_id\x18\n" +
	" \x01(\x03R\x06flowId\x12(\n" +
	"\x10original_flow_id\x18\x0e \x01(\x03R\x0eoriginalFlowId\x12\x17\n" +
	"\arepo_id\x18\x02 \x01(\tR\x06repoId\x12\x1b\n" +
	"\trepo_guid\x18\x0f \x01(\tR\brepoGuid\x12\x17\n" +
	"\aplan_id\x18\x03 \x01(\tR\x06planId\x12\x1f\n" +
	"\vinstance_id\x18\v \x01(\tR\n" +
	"instanceId\x126\n" +
	"\x17original_instance_keyid\x18\x10 \x01(\tR\x15originalInstanceKeyid\x12\x1f\n" +
	"\vsnapshot_id\x18\b \x01(\tR\n" +
	"snapshotId\x12+\n" +
	"\x06status\x18\x04 \x01(\x0e2\x13.v1.OperationStatusR\x06status\x12+\n" +
	"\x12unix_time_start_ms\x18\x05 \x01(\x03R\x0funixTimeStartMs\x12'\n" +
	"\x10unix_time_end_ms\x18\x06 \x01(\x03R\runixTimeEndMs\x12'\n" +
	"\x0fdisplay_message\x18\a \x01(\tR\x0edisplayMessage\x12\x16\n" +
	"\x06logref\x18\t \x01(\tR\x06logref\x12@\n" +
	"\x10operation_backup\x18d \x01(\v2\x13.v1.OperationBackupH\x00R\x0foperationBackup\x12V\n" +
	"\x18operation_index_snapshot\x18e \x01(\v2\x1a.v1.OperationIndexSnapshotH\x00R\x16operationIndexSnapshot\x12@\n" +
	"\x10operation_forget\x18f \x01(\v2\x13.v1.OperationForgetH\x00R\x0foperationForget\x12=\n" +
	"\x0foperation_prune\x18g \x01(\v2\x12.v1.OperationPruneH\x00R\x0eoperationPrune\x12C\n" +
	"\x11operation_restore\x18h \x01(\v2\x14.v1.OperationRestoreH\x00R\x10operationRestore\x12=\n" +
	"\x0foperation_stats\x18i \x01(\v2\x12.v1.OperationStatsH\x00R\x0eoperationStats\x12D\n" +
	"\x12operation_run_hook\x18j \x01(\v2\x14.v1.OperationRunHookH\x00R\x10operationRunHook\x12=\n" +
	"\x0foperation_check\x18k \x01(\v2\x12.v1.OperationCheckH\x00R\x0eoperationCheck\x12M\n" +
	"\x15operation_run_command\x18l \x01(\v2\x17.v1.OperationRunCommandH\x00R\x13operationRunCommandB\x04\n" +
	"\x02op\"\x93\x02\n" +
	"\x0eOperationEvent\x12-\n" +
	"\n" +
	"keep_alive\x18\x01 \x01(\v2\f.types.EmptyH\x00R\tkeepAlive\x12B\n" +
	"\x12created_operations\x18\x02 \x01(\v2\x11.v1.OperationListH\x00R\x11createdOperations\x12B\n" +
	"\x12updated_operations\x18\x03 \x01(\v2\x11.v1.OperationListH\x00R\x11updatedOperations\x12A\n" +
	"\x12deleted_operations\x18\x04 \x01(\v2\x10.types.Int64ListH\x00R\x11deletedOperationsB\a\n" +
	"\x05event\"|\n" +
	"\x0fOperationBackup\x128\n" +
	"\vlast_status\x18\x03 \x01(\v2\x17.v1.BackupProgressEntryR\n" +
	"lastStatus\x12/\n" +
	"\x06errors\x18\x04 \x03(\v2\x17.v1.BackupProgressErrorR\x06errors\"`\n" +
	"\x16OperationIndexSnapshot\x12.\n" +
	"\bsnapshot\x18\x02 \x01(\v2\x12.v1.ResticSnapshotR\bsnapshot\x12\x16\n" +
	"\x06forgot\x18\x03 \x01(\bR\x06forgot\"j\n" +
	"\x0fOperationForget\x12*\n" +
	"\x06forget\x18\x01 \x03(\v2\x12.v1.ResticSnapshotR\x06forget\x12+\n" +
	"\x06policy\x18\x02 \x01(\v2\x13.v1.RetentionPolicyR\x06policy\"Q\n" +
	"\x0eOperationPrune\x12\x1a\n" +
	"\x06output\x18\x01 \x01(\tB\x02\x18\x01R\x06output\x12#\n" +
	"\routput_logref\x18\x02 \x01(\tR\foutputLogref\"Q\n" +
	"\x0eOperationCheck\x12\x1a\n" +
	"\x06output\x18\x01 \x01(\tB\x02\x18\x01R\x06output\x12#\n" +
	"\routput_logref\x18\x02 \x01(\tR\foutputLogref\"\x80\x01\n" +
	"\x13OperationRunCommand\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12#\n" +
	"\routput_logref\x18\x02 \x01(\tR\foutputLogref\x12*\n" +
	"\x11output_size_bytes\x18\x03 \x01(\x03R\x0foutputSizeBytes\"y\n" +
	"\x10OperationRestore\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x16\n" +
	"\x06target\x18\x02 \x01(\tR\x06target\x129\n" +
	"\vlast_status\x18\x03 \x01(\v2\x18.v1.RestoreProgressEntryR\n" +
	"lastStatus\"5\n" +
	"\x0eOperationStats\x12#\n" +
	"\x05stats\x18\x01 \x01(\v2\r.v1.RepoStatsR\x05stats\"\x9a\x01\n" +
	"\x10OperationRunHook\x12\x1b\n" +
	"\tparent_op\x18\x04 \x01(\x03R\bparentOp\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12#\n" +
	"\routput_logref\x18\x02 \x01(\tR\foutputLogref\x120\n" +
	"\tcondition\x18\x03 \x01(\x0e2\x12.v1.Hook.ConditionR\tcondition*`\n" +
	"\x12OperationEventType\x12\x11\n" +
	"\rEVENT_UNKNOWN\x10\x00\x12\x11\n" +
	"\rEVENT_CREATED\x10\x01\x12\x11\n" +
	"\rEVENT_UPDATED\x10\x02\x12\x11\n" +
	"\rEVENT_DELETED\x10\x03*\xc2\x01\n" +
	"\x0fOperationStatus\x12\x12\n" +
	"\x0eSTATUS_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eSTATUS_PENDING\x10\x01\x12\x15\n" +
	"\x11STATUS_INPROGRESS\x10\x02\x12\x12\n" +
	"\x0eSTATUS_SUCCESS\x10\x03\x12\x12\n" +
	"\x0eSTATUS_WARNING\x10\a\x12\x10\n" +
	"\fSTATUS_ERROR\x10\x04\x12\x1b\n" +
	"\x17STATUS_SYSTEM_CANCELLED\x10\x05\x12\x19\n" +
	"\x15STATUS_USER_CANCELLED\x10\x06B,Z*github.com/garethgeorge/backrest/gen/go/v1b\x06proto3"

var (
	file_v1_operations_proto_rawDescOnce sync.Once
	file_v1_operations_proto_rawDescData []byte
)

func file_v1_operations_proto_rawDescGZIP() []byte {
	file_v1_operations_proto_rawDescOnce.Do(func() {
		file_v1_operations_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_operations_proto_rawDesc), len(file_v1_operations_proto_rawDesc)))
	})
	return file_v1_operations_proto_rawDescData
}

var file_v1_operations_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_operations_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v1_operations_proto_goTypes = []any{
	(OperationEventType)(0),        // 0: v1.OperationEventType
	(OperationStatus)(0),           // 1: v1.OperationStatus
	(*OperationList)(nil),          // 2: v1.OperationList
	(*Operation)(nil),              // 3: v1.Operation
	(*OperationEvent)(nil),         // 4: v1.OperationEvent
	(*OperationBackup)(nil),        // 5: v1.OperationBackup
	(*OperationIndexSnapshot)(nil), // 6: v1.OperationIndexSnapshot
	(*OperationForget)(nil),        // 7: v1.OperationForget
	(*OperationPrune)(nil),         // 8: v1.OperationPrune
	(*OperationCheck)(nil),         // 9: v1.OperationCheck
	(*OperationRunCommand)(nil),    // 10: v1.OperationRunCommand
	(*OperationRestore)(nil),       // 11: v1.OperationRestore
	(*OperationStats)(nil),         // 12: v1.OperationStats
	(*OperationRunHook)(nil),       // 13: v1.OperationRunHook
	(*types.Empty)(nil),            // 14: types.Empty
	(*types.Int64List)(nil),        // 15: types.Int64List
	(*BackupProgressEntry)(nil),    // 16: v1.BackupProgressEntry
	(*BackupProgressError)(nil),    // 17: v1.BackupProgressError
	(*ResticSnapshot)(nil),         // 18: v1.ResticSnapshot
	(*RetentionPolicy)(nil),        // 19: v1.RetentionPolicy
	(*RestoreProgressEntry)(nil),   // 20: v1.RestoreProgressEntry
	(*RepoStats)(nil),              // 21: v1.RepoStats
	(Hook_Condition)(0),            // 22: v1.Hook.Condition
}
var file_v1_operations_proto_depIdxs = []int32{
	3,  // 0: v1.OperationList.operations:type_name -> v1.Operation
	1,  // 1: v1.Operation.status:type_name -> v1.OperationStatus
	5,  // 2: v1.Operation.operation_backup:type_name -> v1.OperationBackup
	6,  // 3: v1.Operation.operation_index_snapshot:type_name -> v1.OperationIndexSnapshot
	7,  // 4: v1.Operation.operation_forget:type_name -> v1.OperationForget
	8,  // 5: v1.Operation.operation_prune:type_name -> v1.OperationPrune
	11, // 6: v1.Operation.operation_restore:type_name -> v1.OperationRestore
	12, // 7: v1.Operation.operation_stats:type_name -> v1.OperationStats
	13, // 8: v1.Operation.operation_run_hook:type_name -> v1.OperationRunHook
	9,  // 9: v1.Operation.operation_check:type_name -> v1.OperationCheck
	10, // 10: v1.Operation.operation_run_command:type_name -> v1.OperationRunCommand
	14, // 11: v1.OperationEvent.keep_alive:type_name -> types.Empty
	2,  // 12: v1.OperationEvent.created_operations:type_name -> v1.OperationList
	2,  // 13: v1.OperationEvent.updated_operations:type_name -> v1.OperationList
	15, // 14: v1.OperationEvent.deleted_operations:type_name -> types.Int64List
	16, // 15: v1.OperationBackup.last_status:type_name -> v1.BackupProgressEntry
	17, // 16: v1.OperationBackup.errors:type_name -> v1.BackupProgressError
	18, // 17: v1.OperationIndexSnapshot.snapshot:type_name -> v1.ResticSnapshot
	18, // 18: v1.OperationForget.forget:type_name -> v1.ResticSnapshot
	19, // 19: v1.OperationForget.policy:type_name -> v1.RetentionPolicy
	20, // 20: v1.OperationRestore.last_status:type_name -> v1.RestoreProgressEntry
	21, // 21: v1.OperationStats.stats:type_name -> v1.RepoStats
	22, // 22: v1.OperationRunHook.condition:type_name -> v1.Hook.Condition
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_v1_operations_proto_init() }
func file_v1_operations_proto_init() {
	if File_v1_operations_proto != nil {
		return
	}
	file_v1_restic_proto_init()
	file_v1_config_proto_init()
	file_v1_operations_proto_msgTypes[1].OneofWrappers = []any{
		(*Operation_OperationBackup)(nil),
		(*Operation_OperationIndexSnapshot)(nil),
		(*Operation_OperationForget)(nil),
		(*Operation_OperationPrune)(nil),
		(*Operation_OperationRestore)(nil),
		(*Operation_OperationStats)(nil),
		(*Operation_OperationRunHook)(nil),
		(*Operation_OperationCheck)(nil),
		(*Operation_OperationRunCommand)(nil),
	}
	file_v1_operations_proto_msgTypes[2].OneofWrappers = []any{
		(*OperationEvent_KeepAlive)(nil),
		(*OperationEvent_CreatedOperations)(nil),
		(*OperationEvent_UpdatedOperations)(nil),
		(*OperationEvent_DeletedOperations)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_operations_proto_rawDesc), len(file_v1_operations_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_operations_proto_goTypes,
		DependencyIndexes: file_v1_operations_proto_depIdxs,
		EnumInfos:         file_v1_operations_proto_enumTypes,
		MessageInfos:      file_v1_operations_proto_msgTypes,
	}.Build()
	File_v1_operations_proto = out.File
	file_v1_operations_proto_goTypes = nil
	file_v1_operations_proto_depIdxs = nil
}
