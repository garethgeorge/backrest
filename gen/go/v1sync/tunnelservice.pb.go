// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: v1sync/tunnelservice.proto

package v1sync

import (
	_ "github.com/garethgeorge/backrest/gen/go/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TunnelMessage struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	ConnId int64                  `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"` // The connection ID this request belongs to, enables multiplexing.
	Seqno  int64                  `protobuf:"varint,2,opt,name=seqno,proto3" json:"seqno,omitempty"`
	Data   []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`    // The data to send, this is a raw byte stream.
	Close  bool                   `protobuf:"varint,4,opt,name=close,proto3" json:"close,omitempty"` // If true, the write end should be closed after this request.
	// Encrypted data, if the connection is encrypted.
	Encrypted        []byte     `protobuf:"bytes,5,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	PubkeyEcdhX25519 []byte     `protobuf:"bytes,100,opt,name=pubkey_ecdh_x25519,json=pubkeyEcdhX25519,proto3" json:"pubkey_ecdh_x25519,omitempty"` // The public key used for ECDH key exchange, binary encoded.
	Any              *anypb.Any `protobuf:"bytes,1000,opt,name=any,proto3" json:"any,omitempty"`                                                    // Available to allow sending custom data down the tunnel in the initial handshake.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TunnelMessage) Reset() {
	*x = TunnelMessage{}
	mi := &file_v1sync_tunnelservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TunnelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelMessage) ProtoMessage() {}

func (x *TunnelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_tunnelservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelMessage.ProtoReflect.Descriptor instead.
func (*TunnelMessage) Descriptor() ([]byte, []int) {
	return file_v1sync_tunnelservice_proto_rawDescGZIP(), []int{0}
}

func (x *TunnelMessage) GetConnId() int64 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

func (x *TunnelMessage) GetSeqno() int64 {
	if x != nil {
		return x.Seqno
	}
	return 0
}

func (x *TunnelMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TunnelMessage) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

func (x *TunnelMessage) GetEncrypted() []byte {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *TunnelMessage) GetPubkeyEcdhX25519() []byte {
	if x != nil {
		return x.PubkeyEcdhX25519
	}
	return nil
}

func (x *TunnelMessage) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

var File_v1sync_tunnelservice_proto protoreflect.FileDescriptor

const file_v1sync_tunnelservice_proto_rawDesc = "" +
	"\n" +
	"\x1av1sync/tunnelservice.proto\x12\x06v1sync\x1a\x0fv1/config.proto\x1a\x19google/protobuf/any.proto\"\xdd\x01\n" +
	"\rTunnelMessage\x12\x17\n" +
	"\aconn_id\x18\x01 \x01(\x03R\x06connId\x12\x14\n" +
	"\x05seqno\x18\x02 \x01(\x03R\x05seqno\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12\x14\n" +
	"\x05close\x18\x04 \x01(\bR\x05close\x12\x1c\n" +
	"\tencrypted\x18\x05 \x01(\fR\tencrypted\x12,\n" +
	"\x12pubkey_ecdh_x25519\x18d \x01(\fR\x10pubkeyEcdhX25519\x12'\n" +
	"\x03any\x18\xe8\a \x01(\v2\x14.google.protobuf.AnyR\x03any2M\n" +
	"\rTunnelService\x12<\n" +
	"\x06Tunnel\x12\x15.v1sync.TunnelMessage\x1a\x15.v1sync.TunnelMessage\"\x00(\x010\x01B0Z.github.com/garethgeorge/backrest/gen/go/v1syncb\x06proto3"

var (
	file_v1sync_tunnelservice_proto_rawDescOnce sync.Once
	file_v1sync_tunnelservice_proto_rawDescData []byte
)

func file_v1sync_tunnelservice_proto_rawDescGZIP() []byte {
	file_v1sync_tunnelservice_proto_rawDescOnce.Do(func() {
		file_v1sync_tunnelservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1sync_tunnelservice_proto_rawDesc), len(file_v1sync_tunnelservice_proto_rawDesc)))
	})
	return file_v1sync_tunnelservice_proto_rawDescData
}

var file_v1sync_tunnelservice_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_v1sync_tunnelservice_proto_goTypes = []any{
	(*TunnelMessage)(nil), // 0: v1sync.TunnelMessage
	(*anypb.Any)(nil),     // 1: google.protobuf.Any
}
var file_v1sync_tunnelservice_proto_depIdxs = []int32{
	1, // 0: v1sync.TunnelMessage.any:type_name -> google.protobuf.Any
	0, // 1: v1sync.TunnelService.Tunnel:input_type -> v1sync.TunnelMessage
	0, // 2: v1sync.TunnelService.Tunnel:output_type -> v1sync.TunnelMessage
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_v1sync_tunnelservice_proto_init() }
func file_v1sync_tunnelservice_proto_init() {
	if File_v1sync_tunnelservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1sync_tunnelservice_proto_rawDesc), len(file_v1sync_tunnelservice_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1sync_tunnelservice_proto_goTypes,
		DependencyIndexes: file_v1sync_tunnelservice_proto_depIdxs,
		MessageInfos:      file_v1sync_tunnelservice_proto_msgTypes,
	}.Build()
	File_v1sync_tunnelservice_proto = out.File
	file_v1sync_tunnelservice_proto_goTypes = nil
	file_v1sync_tunnelservice_proto_depIdxs = nil
}
