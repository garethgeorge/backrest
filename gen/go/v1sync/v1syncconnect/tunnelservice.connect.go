// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1sync/tunnelservice.proto

package v1syncconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1sync "github.com/garethgeorge/backrest/gen/go/v1sync"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TunnelServiceName is the fully-qualified name of the TunnelService service.
	TunnelServiceName = "v1sync.TunnelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TunnelServiceTunnelProcedure is the fully-qualified name of the TunnelService's Tunnel RPC.
	TunnelServiceTunnelProcedure = "/v1sync.TunnelService/Tunnel"
)

// TunnelServiceClient is a client for the v1sync.TunnelService service.
type TunnelServiceClient interface {
	Tunnel(context.Context) *connect.BidiStreamForClient[v1sync.TunnelMessage, v1sync.TunnelMessage]
}

// NewTunnelServiceClient constructs a client for the v1sync.TunnelService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTunnelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TunnelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tunnelServiceMethods := v1sync.File_v1sync_tunnelservice_proto.Services().ByName("TunnelService").Methods()
	return &tunnelServiceClient{
		tunnel: connect.NewClient[v1sync.TunnelMessage, v1sync.TunnelMessage](
			httpClient,
			baseURL+TunnelServiceTunnelProcedure,
			connect.WithSchema(tunnelServiceMethods.ByName("Tunnel")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tunnelServiceClient implements TunnelServiceClient.
type tunnelServiceClient struct {
	tunnel *connect.Client[v1sync.TunnelMessage, v1sync.TunnelMessage]
}

// Tunnel calls v1sync.TunnelService.Tunnel.
func (c *tunnelServiceClient) Tunnel(ctx context.Context) *connect.BidiStreamForClient[v1sync.TunnelMessage, v1sync.TunnelMessage] {
	return c.tunnel.CallBidiStream(ctx)
}

// TunnelServiceHandler is an implementation of the v1sync.TunnelService service.
type TunnelServiceHandler interface {
	Tunnel(context.Context, *connect.BidiStream[v1sync.TunnelMessage, v1sync.TunnelMessage]) error
}

// NewTunnelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTunnelServiceHandler(svc TunnelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tunnelServiceMethods := v1sync.File_v1sync_tunnelservice_proto.Services().ByName("TunnelService").Methods()
	tunnelServiceTunnelHandler := connect.NewBidiStreamHandler(
		TunnelServiceTunnelProcedure,
		svc.Tunnel,
		connect.WithSchema(tunnelServiceMethods.ByName("Tunnel")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1sync.TunnelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TunnelServiceTunnelProcedure:
			tunnelServiceTunnelHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTunnelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTunnelServiceHandler struct{}

func (UnimplementedTunnelServiceHandler) Tunnel(context.Context, *connect.BidiStream[v1sync.TunnelMessage, v1sync.TunnelMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("v1sync.TunnelService.Tunnel is not implemented"))
}
