// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1sync/syncservice.proto

package v1syncconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1sync "github.com/garethgeorge/backrest/gen/go/v1sync"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackrestSyncServiceName is the fully-qualified name of the BackrestSyncService service.
	BackrestSyncServiceName = "v1sync.BackrestSyncService"
	// BackrestSyncStateServiceName is the fully-qualified name of the BackrestSyncStateService service.
	BackrestSyncStateServiceName = "v1sync.BackrestSyncStateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackrestSyncServiceSyncProcedure is the fully-qualified name of the BackrestSyncService's Sync
	// RPC.
	BackrestSyncServiceSyncProcedure = "/v1sync.BackrestSyncService/Sync"
	// BackrestSyncStateServiceGetPeerSyncStatesStreamProcedure is the fully-qualified name of the
	// BackrestSyncStateService's GetPeerSyncStatesStream RPC.
	BackrestSyncStateServiceGetPeerSyncStatesStreamProcedure = "/v1sync.BackrestSyncStateService/GetPeerSyncStatesStream"
)

// BackrestSyncServiceClient is a client for the v1sync.BackrestSyncService service.
type BackrestSyncServiceClient interface {
	Sync(context.Context) *connect.BidiStreamForClient[v1sync.SyncStreamItem, v1sync.SyncStreamItem]
}

// NewBackrestSyncServiceClient constructs a client for the v1sync.BackrestSyncService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackrestSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackrestSyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backrestSyncServiceMethods := v1sync.File_v1sync_syncservice_proto.Services().ByName("BackrestSyncService").Methods()
	return &backrestSyncServiceClient{
		sync: connect.NewClient[v1sync.SyncStreamItem, v1sync.SyncStreamItem](
			httpClient,
			baseURL+BackrestSyncServiceSyncProcedure,
			connect.WithSchema(backrestSyncServiceMethods.ByName("Sync")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backrestSyncServiceClient implements BackrestSyncServiceClient.
type backrestSyncServiceClient struct {
	sync *connect.Client[v1sync.SyncStreamItem, v1sync.SyncStreamItem]
}

// Sync calls v1sync.BackrestSyncService.Sync.
func (c *backrestSyncServiceClient) Sync(ctx context.Context) *connect.BidiStreamForClient[v1sync.SyncStreamItem, v1sync.SyncStreamItem] {
	return c.sync.CallBidiStream(ctx)
}

// BackrestSyncServiceHandler is an implementation of the v1sync.BackrestSyncService service.
type BackrestSyncServiceHandler interface {
	Sync(context.Context, *connect.BidiStream[v1sync.SyncStreamItem, v1sync.SyncStreamItem]) error
}

// NewBackrestSyncServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackrestSyncServiceHandler(svc BackrestSyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backrestSyncServiceMethods := v1sync.File_v1sync_syncservice_proto.Services().ByName("BackrestSyncService").Methods()
	backrestSyncServiceSyncHandler := connect.NewBidiStreamHandler(
		BackrestSyncServiceSyncProcedure,
		svc.Sync,
		connect.WithSchema(backrestSyncServiceMethods.ByName("Sync")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1sync.BackrestSyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackrestSyncServiceSyncProcedure:
			backrestSyncServiceSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackrestSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackrestSyncServiceHandler struct{}

func (UnimplementedBackrestSyncServiceHandler) Sync(context.Context, *connect.BidiStream[v1sync.SyncStreamItem, v1sync.SyncStreamItem]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("v1sync.BackrestSyncService.Sync is not implemented"))
}

// BackrestSyncStateServiceClient is a client for the v1sync.BackrestSyncStateService service.
type BackrestSyncStateServiceClient interface {
	GetPeerSyncStatesStream(context.Context, *connect.Request[v1sync.SyncStateStreamRequest]) (*connect.ServerStreamForClient[v1sync.PeerState], error)
}

// NewBackrestSyncStateServiceClient constructs a client for the v1sync.BackrestSyncStateService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackrestSyncStateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackrestSyncStateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backrestSyncStateServiceMethods := v1sync.File_v1sync_syncservice_proto.Services().ByName("BackrestSyncStateService").Methods()
	return &backrestSyncStateServiceClient{
		getPeerSyncStatesStream: connect.NewClient[v1sync.SyncStateStreamRequest, v1sync.PeerState](
			httpClient,
			baseURL+BackrestSyncStateServiceGetPeerSyncStatesStreamProcedure,
			connect.WithSchema(backrestSyncStateServiceMethods.ByName("GetPeerSyncStatesStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backrestSyncStateServiceClient implements BackrestSyncStateServiceClient.
type backrestSyncStateServiceClient struct {
	getPeerSyncStatesStream *connect.Client[v1sync.SyncStateStreamRequest, v1sync.PeerState]
}

// GetPeerSyncStatesStream calls v1sync.BackrestSyncStateService.GetPeerSyncStatesStream.
func (c *backrestSyncStateServiceClient) GetPeerSyncStatesStream(ctx context.Context, req *connect.Request[v1sync.SyncStateStreamRequest]) (*connect.ServerStreamForClient[v1sync.PeerState], error) {
	return c.getPeerSyncStatesStream.CallServerStream(ctx, req)
}

// BackrestSyncStateServiceHandler is an implementation of the v1sync.BackrestSyncStateService
// service.
type BackrestSyncStateServiceHandler interface {
	GetPeerSyncStatesStream(context.Context, *connect.Request[v1sync.SyncStateStreamRequest], *connect.ServerStream[v1sync.PeerState]) error
}

// NewBackrestSyncStateServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackrestSyncStateServiceHandler(svc BackrestSyncStateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backrestSyncStateServiceMethods := v1sync.File_v1sync_syncservice_proto.Services().ByName("BackrestSyncStateService").Methods()
	backrestSyncStateServiceGetPeerSyncStatesStreamHandler := connect.NewServerStreamHandler(
		BackrestSyncStateServiceGetPeerSyncStatesStreamProcedure,
		svc.GetPeerSyncStatesStream,
		connect.WithSchema(backrestSyncStateServiceMethods.ByName("GetPeerSyncStatesStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1sync.BackrestSyncStateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackrestSyncStateServiceGetPeerSyncStatesStreamProcedure:
			backrestSyncStateServiceGetPeerSyncStatesStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackrestSyncStateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackrestSyncStateServiceHandler struct{}

func (UnimplementedBackrestSyncStateServiceHandler) GetPeerSyncStatesStream(context.Context, *connect.Request[v1sync.SyncStateStreamRequest], *connect.ServerStream[v1sync.PeerState]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("v1sync.BackrestSyncStateService.GetPeerSyncStatesStream is not implemented"))
}
